plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id "io.freefair.lombok" version "8.4"
	id 'org.hidetake.swagger.generator' version '2.19.2'
	id 'com.bmuschko.docker-remote-api' version '7.2.0'
}
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

setGroup('pl.inpost')
setVersion('1.0')


java {
	sourceCompatibility = '17'
}
jar {
	enabled = false
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

processResources {
	dependsOn(generateSwaggerCode)
}


swaggerSources {
	main {
		inputFile = file("${rootDir}/openapi/api.yaml")
		code {
			language = 'spring'
			configFile = file("${rootDir}/openapi/config.json")
			//what to generate. Optional.
			components = [
					'models' ,
					'apis',
					'supportingFiles'
			]
			dependsOn validation
		}
	}
}

//Set generated code to sourceSet to be able to used it in the implementation
compileJava.dependsOn swaggerSources.main.code
sourceSets.main.java.srcDir "${swaggerSources.main.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.main.code.outputDir}/src/main/resources"

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//we also set heteoas to true in config.json
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//open api code generation
	swaggerCodegen 'org.openapitools:openapi-generator-cli:7.3.0'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.20'

	//open api ui
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.6.0'

	//actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//mappers
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

tasks.named('test') {
	useJUnitPlatform()
}

task buildDockerImage(type: DockerBuildImage) {
	dependsOn build
	inputDir = rootDir
	images.add(rootProject.group+'/'+rootProject.name+':'+rootProject.version)
}

task createDockerContainer(type: DockerCreateContainer) {
	dependsOn buildDockerImage
	targetImageId buildDockerImage.getImageId()
	hostConfig.portBindings = ['8080:8080']
	hostConfig.autoRemove = true
}

task startDockerContainer(type: DockerStartContainer) {
	dependsOn createDockerContainer
	targetContainerId createDockerContainer.getContainerId()
}

